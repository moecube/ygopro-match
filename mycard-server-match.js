// Generated by CoffeeScript 1.6.2
(function() {
  var freeport, http, rooms, server, settings, spawn, url, waiting, _;

  http = require("http");

  url = require("url");

  _ = require("underscore");

  spawn = require('child_process').spawn;

  freeport = require('freeport');

  settings = require("./config.json");

  waiting = [];

  rooms = {};

  server = http.createServer(function(request, response) {
    var opponent_response;

    console.log("" + (new Date()) + " Received request for " + request.url + " from " + request.connection.remoteAddress + ")");
    if (url.parse(request.url).pathname !== '/match.json') {
      response.writeHead(404);
      response.end();
      return;
    }
    if (waiting.length === 0) {
      waiting.push(response);
      request.connection.addListener('close', function() {
        var index;

        index = waiting.indexOf(response);
        if (index !== -1) {
          waiting.splice(response, 1);
          return console.log("" + (new Date()) + " Peer " + request.connection.remoteAddress + " disconnected during waiting.");
        }
      });
      return response.connection.setTimeout(0);
    } else {
      opponent_response = waiting.pop();
      return freeport(function(err, port) {
        var room;

        if (err) {
          response.writeHead(500);
          response.end(err);
          opponent_response.writeHead(500);
          return opponent_response.end(err);
        } else {
          room = spawn('./ygopro', [port, 0, 0, 1, 'F', 'F', 'F', 8000, 5, 1], {
            cwd: 'ygocore'
          });
          room.on('exit', function(code) {
            return console.log("room " + port + " exited with code " + code);
          });
          response.writeHead(200, {
            "Content-Type": "application/json"
          });
          room = "mycard://" + settings.ip + ":" + port + "/";
          console.log("matched: " + room);
          opponent_response.end(room);
          return response.end(room);
        }
      });
    }
  }).listen(settings.port);

}).call(this);
